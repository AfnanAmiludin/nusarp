import json
import os
import sys

from pythonnet import load

load('coreclr', )
import clr

sys.path.append(os.getcwd() + '/lib/win.x64/', )
clr.AddReference('ERPro.NET')
from ERPro.NET import PdfViewer

docEditor = PdfViewer()
base64String = "";
print("Sfdt for provided Load: " + str(docEditor.Load(json.dumps({
    "document": "C:\\Users\\Public\\Documents\\Syncfusion\\JavaScript - EJ2\\21.1.35\\ej2-web-services\\App_Data\\PDF_Succinctly.pdf",
    "zoomFactor": "1",
    "isFileName": "true",
    "uniqueId": "Sync_PdfViewer_220002e1-9e1f-4f3a-eca8-f7e10ad3e194",
    "hideEmptyDigitalSignatureFields": False,
    "showDigitalSignatureAppearance": True,
    "action": "Load",
    "elementId": "pdfViewer"
}))))
print("Sfdt for provided base64String: " + str(docEditor.Bookmarks(json.dumps({
    "hashId": "bRcRXQHfbJ6OCHfUqKUEjg==",
    "action": "Bookmarks",
    "elementId": "pdfViewer",
    "uniqueId": "Sync_PdfViewer_220002e1-9e1f-4f3a-eca8-f7e10ad3e194",
    "documentId": "PDF_Succinctly.pdf"
}))))
# print("Sfdt for provided Download: " + str(docEditor.Download(json.dumps({
#     "hashId": "bRcRXQHfbJ6OCHfUqKUEjg==",
#     "documentId": "PDF_Succinctly.pdf",
#     "uniqueId": "Sync_PdfViewer_220002e1-9e1f-4f3a-eca8-f7e10ad3e194",
#     "textMarkupAnnotations": "[[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]]",
#     "shapeAnnotations": "[[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]]",
#     "measureShapeAnnotations": "[[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]]",
#     "stampAnnotations": "[[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]]",
#     "stickyNotesAnnotation": "[[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]]",
#     "formDesigner": None,
#     "signatureData": "[[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]]",
#     "freeTextAnnotation": "[[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]]",
#     "inkSignatureData": "[[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]]",
#     "action": "Download",
#     "elementId": "pdfViewer",
#     "isAnnotationsExist": False,
#     "annotationsPageList": "[]",
#     "isFormFieldAnnotationsExist": False,
#     "formFieldsPageList": "[]",
#     "annotationCollection": "[]"
# }))))
